// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String     @id @default(cuid())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?    @db.Text
  access_token       String?    @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?    @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String     @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessionToken String     @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  communities   Member[]
  discordUsers  DiscordUser[]
}

model VerificationToken {
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  identifier    String
  token         String   @unique
  expires       DateTime

  @@unique([identifier, token])
}

model Community {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String
  slug          String    @unique
  description   String
  image         String
  
  members       Member[]
  discordGuilds DiscordGuild[]
}

model Member {
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  communityId   String

  role          String // valid values owner, admin, member

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  community     Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@unique([userId, communityId])
}

model DiscordGuild {
  id              String    @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  communityId     String?

  name            String?
  discordId       String   @unique
  botInstallDate  DateTime?
  botInstalled    Boolean @default(false)

  // welcome settings
  welcomeChannelId                      String?       // the channel monitored for welcome activity
  welcomeType                           String?       // the type of welcome being monitored = thread, atmention
  welcomeThreadArchiveDurationMinutes   Int? // the number of minutes to archive the welcome thread after

  members       DiscordMember[]
  community     Community? @relation(fields: [communityId], references: [id], onDelete: Cascade)
}

model DiscordUser {
  id            String          @id @default(cuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userId        String?         
  discordId     String          @unique
  name          String
  discriminator String

  user          User?            @relation(fields: [userId], references: [id])
  guilds        DiscordMember[]
}

model DiscordMember {
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  discordUserId     String
  discordGuildId    String

  nickname          String?

  discordUser       DiscordUser @relation(fields: [discordUserId], references: [id], onDelete: Cascade)
  discordGuild      DiscordGuild @relation(fields: [discordGuildId], references: [id], onDelete: Cascade)

  @@unique([discordUserId, discordGuildId])
}